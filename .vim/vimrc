"set shell=zsh " Local shell. Set in .vimrc.local.

set nocompatible " Disable legacy vi compatiblity

" Leader
let mapleader = ","
inoremap jj <ESC>

" Start vim-plug
" Some vim-plug cmds: PlugInstall, PlugUpdate, PlugClean, PlugUpgrade
call plug#begin('~/.vim/bundle')
 Plug 'mileszs/ack.vim' " Vim ack/ag integration
 Plug 'bling/vim-airline' " Fancy statusbar
 Plug 'vim-airline/vim-airline-themes' " Themes for fancy statusbar
 Plug 'jiangmiao/auto-pairs' " Automatically insert pairs of quotes/braces/brackets while typing
 Plug 'ntpeters/vim-better-whitespace' " Highlight trailing whitespace
 Plug 'qpkorr/vim-bufkill' " Kill buffer without killing the split/window
 Plug 'jeetsukumaran/vim-buffergator' " Buffer management
 Plug 'docunext/closetag.vim' " Auto html5 tag closer
 Plug 'ctrlpvim/ctrlp.vim', " Fuzzy filename matcher
 Plug 'raimondi/delimitmate' " Insert-mode auto-completion for quotes, parens, brackets
 Plug 'junegunn/vim-easy-align' " Alignment
 Plug 'editorconfig/editorconfig-vim' " For consistent coding style
 Plug 'isruslan/vim-es6' " es6 syntax and snippets
 Plug 'mattn/emmet-vim' " Emmet expansion
 Plug 'tpope/vim-fugitive' " Git inigration for vim
 Plug 'justinmk/vim-gtfo' " Go to terminal or file manager
 Plug 'airblade/vim-gitgutter' " Git in ur gutter
 Plug 'othree/html5.vim' " HTML5 syntax enhancements
 Plug 'nathanaelkane/vim-indent-guides' " Visually display indent guides
 Plug 'pangloss/vim-javascript' " Better es6/es2015 syntax support
 Plug 'Valloric/ListToggle' " Quickly toggle Quickfix and Location panels
 Plug 'elzr/vim-json' " JSON syntax enhancments for vim
 Plug 'terryma/vim-multiple-cursors' " ST3 style multi selection
 Plug 'mustache/vim-mustache-handlebars' " Handlebars syntax enhancements
 Plug 'scrooloose/nerdtree' " File manager
 Plug 'scrooloose/nerdcommenter' " Quickly toggle comment blocks
 Plug 'xuyuanp/nerdtree-git-plugin' " Git status in nerdtree
 Plug 'cakebaker/scss-syntax.vim' " Sass/Scss syntax enhancements
 Plug 'slim-template/vim-slim' " Syntax highlighting
 Plug 'andrewradev/splitjoin.vim' " Split and join lines
 Plug 'mhinz/vim-startify' " Fancy start screen showing recently edited files
 Plug 'ervandew/supertab' " Tab autocompletion
 Plug 'tpope/vim-surround' " Plugin for working with quotes/braces/brackets etc
 Plug 'scrooloose/syntastic' " Linter

" Color Themes
 Plug 'jdkanani/vim-material-theme'
call plug#end()


" General defaults
filetype plugin indent on " Allow smart indentation and filetype detection
set encoding=utf8 nobomb " Set charset to utf8 (Necessary for fancy icon plugins)
syntax enable " Turn on syntax highlighting
set number " Turn on line numbers
set bg=dark " Dark background
set hidden " Allow 'hidden' buffers
set nowrap " Disable line auto wrapping
set cursorline " highlight current line
set numberwidth=5 " Gutter width
set autoread " Auto re-read files that have changes outside of vim
set lazyredraw
set mouse=a " Turn on the mouse ;)
set mousehide " hide the mouse in the gui while typing
set ttyfast   " Optimize for fast terminal connections
set shortmess=atI   " Don't show the intro message when starting vim
set history=50
set scrolloff=3   " Start scrolling three lines before the horizontal window border
set nostartofline   " Don’t reset cursor to start of line when moving around.
set clipboard=unnamed   " yank and paste with the system clipboard


" Swap/Backup file settings
set noswapfile " no more weirdo swap files
set nobackup " no more weirdo backup files
set nowritebackup " no more weirdo write backup files
set backupdir=~/.backup " Where backups would go if we had them
set dir=~/.swap " Where swap files would go if we had them
set directory-=.   " don't store swapfiles in the current directory


" Split/window behavior
set splitright " Open vertical splits/windows to the right by default
set splitbelow " Open horizontal splits/windows to the bottom by default
set switchbuf=useopen " Switch to active window if attempting to split an already active buffer


" Search settings
set ignorecase " case-insensitive searching
set smartcase " make search case-sensitive if search term contains mixed case
set hlsearch " Highlight search pattern matches
set incsearch " Add live highlighting to matches while typing search term


" Indentation settings
let g:indentation_depth = 2
let &tabstop=g:indentation_depth " Set tab character width
let &backspace=g:indentation_depth " Make backspace work like a sane person would expect
let &shiftwidth=g:indentation_depth " Set distance to move lines or blocks
let &softtabstop=g:indentation_depth " Set space added by pressing tab key and removed by pressing backspace
set backspace=indent,eol,start   " Backspace through everything in INSERT mode
set autoindent " keeps indention at current depth for successive lines
set copyindent " copy the previous indentation on autoindenting
set expandtab " Convert tabs to spaces
let g:indent_guides_start_level=2
let g:indent_guides_guide_size=1


" Always use vertical diffs
set diffopt+=vertical


" Code folding & wrap guides
set nofoldenable
set foldcolumn=2
set foldlevel=99 " show all folds by default
set foldlevelstart=99 " show all folds by default
set fcs=fold:-
set textwidth=80 " text wrap
"set colorcolumn=+1 " Make it obvious where 80 characters is


" Filetype settings
if has("autocmd")
  " Languages with specific tabs/space requirements
  autocmd FileType make setlocal ts=4 sts=4 sw=4 noexpandtab
  " Automatically strip trailing whitespace on file save using better-whitespace
  autocmd FileType css,html,js,json,md,php,py,rb,scss,sh,txt autocmd BufEnter <buffer> EnableStripWhitespaceOnSave
  " Don't treat json as javascript
  autocmd BufRead,BufNewFile *.json set filetype=json
  " fdoc is yaml
  autocmd BufRead,BufNewFile *.fdoc set filetype=yaml
  " md is markdown
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile *.md set spell
  " automatically rebalance windows on vim resize
  autocmd VimResized * :wincmd =
endif


" GUI & Theme settings
if $TERM_PROGRAM =~ 'iTerm'
  " Set true color. Requires Vim v.7.4.1799 or greater
  set termguicolors
  colorscheme material-theme
else
  " Set 256 color terminal support
  set t_Co=256
  colorscheme sweater
endif


" Status & Info settings
if has("cmdline_info")
  " Show the cursor line and column number
  set ruler
  " Show partial commands in status line
  set showcmd
  " Show whether in insert or replace mode
  set showmode
endif
if has('statusline')
  " Always show status line
  set laststatus=2
  " Broken down into easily includeable segments
  " Filename
  set statusline=%<%f\
  " Options
  set statusline+=%w%h%m%r
  " Current dir
  set statusline+=\ [%{getcwd()}]
  " Right aligned file nav info
  set statusline+=%=%-14.(%l,%c%V%)\ %p%%
endif


" Wildmenu settings - for command autocompletion
if has("wildmenu")
  set wildmenu " Show completion options (filenames, plugin functions, etc) in a traversable menu
  " Tab autocomplete longest possible part of a string, then list
  set wildmode=longest,list,full
  if has ("wildignore")
    set wildignore+=*.a,*.pyc,*.o,*.orig
    set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png
    set wildignore+=.DS_Store,.git,.hg,.svn
    set wildignore+=*~,*.sw?,*.tmp
    set wildignore=log/**,node_modules/**,*/bower_components/*,target/**,tmp/**,*.rbc
  endif
endif


" Search plugin settings
if has("extra_search")
  " Highlight searches [use :noh to clear]
  set hlsearch
  " Highlight dynamically as pattern is typed
  set incsearch
  " Ignore case of searches...
  set ignorecase
  " ...unless has mixed case
  set smartcase
endif

" Use The Silver Searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor\ --column

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Ack settings
if executable('ack')
  let g:ackprg = 'ag --vimgrep'
  let g:ackhighlight = 1
endif

" CtrlP settings
let g:ctrlp_show_hidden = 1 " Show hidden files when using ctrlp
let g:ctrlp_match_window = 'order:ttb,max:20'



" TMUX Settings
if exists('$TMUX')
  set ttymouse=xterm2 " Support resizing in tmux
  " Fix Cursor in TMUX
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif



" plugin settings
let g:NERDSpaceDelims=1
let g:gitgutter_enabled = 1


" Custom keymap for vim-multiple-cursors
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-d>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'


" airline settings
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_symbols.space = "\ua0"
let g:airline_theme='bubblegum'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''
let g:airline#extensions#branch#displayed_head_limit = 10
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#bufferline#enabled = 0
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline#extensions#whitespace#symbol = '!'
let g:airline#extensions#whitespace#checks = [ 'indent', 'trailing' ]
let g:airline#extensions#whitespace#trailing_format = 'trailing[%s]'
let g:airline#extensions#whitespace#mixed_indent_format = 'mixed-indent[%s]'


" ================== remaps ====================

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Better mark jumping (line + col)
nnoremap ' `

" Move current line or selected block up/down. Works in normal, insert and visual modes
" For Mac only! Alt+j/k
nnoremap ∆ :m .+1<CR>
nnoremap ˚ :m .-2<CR>
inoremap ∆ <Esc>:m .+1<CR>
inoremap ˚ <Esc>:m .-2<CR>
vnoremap ∆ :m '>+1<CR>
vnoremap ˚ :m '<-2<CR>

" Maps Alt-[h,l] to resizing a window split
map <silent> ˙ <C-w><
map <silent> ¬ <C-w>>
" Maps Alt-[s.v] to horizontal and vertical split respectively
map <silent> ß :split<CR>
map <silent> √ :vsplit<CR>
" Maps Alt-[n,p] for moving next and previous window respectively
map <silent> ˜ <C-w><C-w>
map <silent> π <C-w><S-w>


" Hard to type things
imap >> →
imap << ←
imap ^^ ↑
imap VV ↓
imap aa λ


" turn off YCM
nnoremap <leader>y :let g:ycm_auto_trigger=0<CR>
" turn on YCM
nnoremap <leader>Y :let g:ycm_auto_trigger=1<CR>


" Faster viewport scrolling (3 lines at a time)
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>
vnoremap <C-e> 3<C-e>
vnoremap <C-y> 3<C-y>


" Make `Y` work from the cursor to the end of line (which is more logical)
nnoremap Y y$


" Indent/unident block (,]) (,[)
"nnoremap <leader>] >i{<CR>
"nnoremap <leader>[ <i{<CR>


" Paste toggle (,p)
set pastetoggle=<leader>p
map <leader>p :set invpaste paste?<CR>


" Buffer navigation (,,) (,]) (,[) (,ls)
map <Leader>, <C-^>
map <Leader>- :bn<CR>
map <Leader>= :bp<CR>
map <Leader>ls :buffers<CR>
map <Leader>d :bp\|bd #<CR>

" Close all window (,qq)
map <leader>qq :qa<CR>


" Yank from cursor to end of line
nnoremap Y y$


" Insert newline
map <leader><Enter> o<ESC>


" Search and replace word under cursor (,*)
nnoremap <leader>* :%s/\<<C-r><C-w>\>//<Left>


" Join lines and restore cursor location (J)
nnoremap J mjJ`j


" Toggle folds (<Space>)
nnoremap <silent> <space> :exe 'silent! normal! '.((foldclosed('.')>0)? 'zMzx' : 'zc')<CR>

" File Tabs
"nnoremap <C-Tab> :tabprev<CR>
"nnoremap <C-S-Tab> :tabnext<CR>
noremap <leader>th :tabprev<CR>
nnoremap <leader>tl :tabnext<CR>
nnoremap <leader>tn :tabnew<CR>
nnoremap <leader>tw :tabclose<CR>

" Window navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

"noremap <leader>l :Align
nnoremap <leader>a :Ack!<space>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>nt :NERDTreeToggle<CR>
nnoremap <leader>nf :NERDTreeFind<CR>
nnoremap <leader>P :CtrlPClearCache<CR>:CtrlP<CR>
"nnoremap <leader>\ :TagbarToggle<CR>
nnoremap <leader>g :GitGutterToggle<CR>
nnoremap <leader>c <Plug>Kwbd
" to reload vimrc
noremap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)


" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


" Faster split resizing (+,-)
if bufwinnr(1)
  map + <C-W>+
  map - <C-W>-
endif


" Sudo write (,W)
noremap <leader>W :w !sudo tee %<CR>

" in case you forgot to sudo
cnoremap w!! %!sudo tee > /dev/null %


" node.vim commands
autocmd User Node
      \ if &filetype == "javascript" |
      \   nmap <buffer> <C-w>f <Plug>NodeVSplitGotoFile |
      \   nmap <buffer> <C-w><C-f> <Plug>NodeVSplitGotoFile |
      \ endif



" Load local machine settings if they exist
if filereadable(glob("$HOME/.vimrc.local"))
  source $HOME/.vimrc.local
endif
